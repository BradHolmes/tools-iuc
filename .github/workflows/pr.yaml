name: Galaxy Tool Linting and Tests for push and PR
on: [push, pull_request]
env:
  GALAXY_REPO: https://github.com/galaxyproject/galaxy
  GALAXY_RELEASE: release_20.09
jobs:
  # the setup job does two things:
  # 1. cache the pip cache and .planemo
  # 2. determine the list of changed repositories
  # it produces one artifact which contains
  # - a file with the latest SHA from the chosen branch of the Galaxy repo
  # - a file containing the list of changed repositories
  # which are needed in subsequent steps.
  setup:
    name: Setup cache and determine changed repositories
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    outputs:
      galaxy-commit: ${{ steps.galaxy-commit.outputs.galaxy-commit }}
      changed-repositories: ${{ steps.discover-repositories.outputs.changed-repositories }}
    steps:
    - name: Print github context properties
      run: |
        echo 'event: ${{ github.event_name }}'
        echo 'sha: ${{ github.sha }}'
        echo 'ref: ${{ github.ref }}'
        echo 'head_ref: ${{ github.head_ref }}'
        echo 'base_ref: ${{ github.base_ref }}'
        echo 'event.before: ${{ github.event.before }}'
        echo 'event.after: ${{ github.event.after }}'
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Determine latest galaxy commit
      run: echo "GALAXY_HEAD_SHA=$(git ls-remote ${{ env.GALAXY_REPO }} refs/heads/${{ env.GALAXY_RELEASE }} | cut -f1)" >> $GITHUB_ENV
    - name: Set galaxy head commit
      id: galaxy-commit
      run: echo "::set-output name=galaxy-commit::$GALAXY_HEAD_SHA"
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_$GALAXY_HEAD_SHA
    - name: Cache .planemo
      uses: actions/cache@v2
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py_${{ matrix.python-version }}_gxy_$GALAXY_HEAD_SHA
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: mvdbeek/planemo-discover-action@master
      id: discover-repositories
      with:
        create-cache: ${{ steps.cache-pip.outputs.cache-hit != 'true' || steps.cache-planemo.outputs.cache-hit != 'true' }}
        galaxy-branch: ${{ env.GALAXY_RELEASE }}
        galaxy-source: ${{ env.GALAXY_REPO }}

  # Planemo lint the changed repositories
  lint:
    name: Lint tools
    needs: setup
    if: needs.setup.outputs.changed-repositories != ''
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
    steps:
    # checkout the repository
    # and use it as the current working directory
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy-commit }}
    - uses: mvdbeek/planemo-discover-action@master
      id: discover-repositories
      with:
         changed-repositories: ${{ needs.setup.outputs.changed-repositories }}

  # flake8 of Python scripts in the changed repositories
  flake8:
    name: Lint Python scripts
    needs: setup
    if: needs.setup.outputs.changed-repositories != ''
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
    steps:
    # checkout the repository to master
    # and use it as the current working directory
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy-commit }}
    - name: Install flake8
      run: pip install flake8 flake8-import-order
    - name: Flake8
      run: flake8 ${{ needs.setup.outputs.changed-repositories }}

  lintr:
    name: Lint R scripts
    needs: setup
    if: needs.setup.outputs.changed-repositories != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        r-version: [4.0.1]
    steps:
    # checkout the repository to master
    # and use it as the current working directory
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: r-lib/actions/setup-r@master
      with:
        r-version: ${{ matrix.r-version }}
    - name: Cache R packages
      uses: actions/cache@v2
      with:
        path: ${{ env.R_LIBS_USER }}
        key: r_cache_${{ matrix.r-version }}
    - name: Install non-R lintr dependencies
      run: sudo apt-get install libcurl4-openssl-dev 
    - name: Install lintr
      run: |
        install.packages('remotes')
        remotes::install_cran("lintr")
      shell: Rscript {0}

    - run: echo ${{ needs.setup.outputs.changed-repositories }} > changed_repositories.list
    - name: lintr
      run: |
        library(lintr)
        linters <- with_defaults(line_length_linter = NULL)
        con <- file("changed_repositories.list", "r")
        status <- 0
        while (TRUE) {
          repo <- readLines(con, n = 1)
          if (length(repo) == 0) {
             break
          }
          lnt <- lint_dir(repo, relative_path=T, linters=linters)
          if (length(lnt) > 0) {
            status <- 1
            for (l in lnt) {
              rel_path <- paste(repo, l$filename, sep="/")
              write(paste(paste(rel_path, l$line_number, l$column_number, sep=":"), l$message), stderr())
            }
          }
        }
        quit(status = status)
      shell: Rscript {0}

  # Planemo test the changed repositories, each chunk creates an artifact
  # containing HTML and JSON reports for the executed tests
  test:
    name: Test tools
    # This job runs on Linux
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.changed-repositories != ''
    strategy:
      fail-fast: false
      matrix:
        chunk: [0, 1, 2, 3]
        python-version: [3.7]
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
    # checkout the repository
    # and use it as the current working directory
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy-commit }}
    - name: Cache .planemo
      uses: actions/cache@v2
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy-commit }}
    - uses: mvdbeek/planemo-discover-action@master
      with:
         changed-repositories: ${{ needs.setup.outputs.changed-repositories }}
         test-tools: true
         combine-outputs: true
         chunk-count: 4
         chunk: ${{ matrix.chunk}}
    - uses: actions/upload-artifact@v2.0.1
      with:
        name: 'Tool test output ${{ matrix.chunk }}'
        path: upload


  # - combine the results of the test chunks (which will never fail due
  #   to `|| true`) and create a global test report as json and html which
  #   is provided as artifact
  # - check if any tool test actually failed (by lookup in the combined json)
  #   and fail this step if this is the case
  combine_outputs:
    name: Combine chunked test results
    needs: [setup, test]
    strategy:
      matrix:
        python-version: [3.7]
    # This job runs on Linux
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        path: artifacts
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_{{ needs.setup.outputs.galaxy-commit }}
    - name: Install jq
      run: sudo apt-get install jq
    - uses: mvdbeek/planemo-discover-action@master
      with:
         changed-repositories: ${{ needs.setup.outputs.changed-repositories }}
         combine-outputs: true
         html-report: true
    - uses: actions/upload-artifact@v2.0.1
      with:
        name: 'All tool test results'
        path: upload
    - name: Check status of combined status
      run: |
        if jq '.["tests"][]["data"]["status"]' upload/tool_test_output.json | grep -v "success"; then
            echo "Unsuccessful tests found, inspect the 'All tool test results' artifact for details."
            exit 1
        fi

  # deploy the tools to the toolsheds (first TTS for testing)
  deploy:
    name: Deploy
    needs: [setup,lint,flake8,lintr,combine_outputs]
    strategy:
      matrix:
        python-version: [3.7]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.repository_owner == 'galaxyproject'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_{{ needs.setup.outputs.galaxy-commit }}
    - name: Deploy on testtoolshed
      uses: mvdbeek/planemo-discover-action@master
      with:
         changed-repositories: ${{ needs.setup.outputs.changed-repositories }}
         deploy-tools: true
         shed-target: testtoolshed
         shed-key: ${{ secrets.tts_api_key }}
      continue-on-error: true
    - name: Deploy on toolshed
      uses: mvdbeek/planemo-discover-action@master
      with:
         changed-repositories: ${{ needs.setup.outputs.changed-repositories }}
         deploy-tools: true
         shed-target: toolshed
         shed-key: ${{ secrets.ts_api_key }}
